mov ax,0x07c0
mov ds,ax
mov sp,ax
mov ax,0x5000
mov ss,ax

cli
mov al,0x11    ;ICW1
out 0x20,al
out 0xA0,al
    
mov al,0x20    ;ICW2
out 0x21,al
mov al,0x28
out 0xA1,al

mov al,0x04    ;ICW3
out 0x21,al
mov al,0x02
out 0xA1,al
    
mov al,0x01    ;ICW4
out 0x21,al
out 0xA1,al

mov al,0xFB
out 0x21,al
mov al,0xEF
out 0xA1,al
sti

initialize_ps2:
    cli
    mov ax,0
    mov es,ax
    mov di,[kb_irq_offset]
    mov ax,kb_irq_handler
    mov [es:di],ax
    inc di
    inc di
    mov ax,0x07c0
    mov [es:di],ax
    
    mov al,0xA7 ;disable port 2
    out 0x64,al
    mov al,0xAD ; disable port 1
    out 0x64,al

    in al,0x60 ; flush buffer

    mov al,0x20    ; enable interrupt for port 1
    out 0x64,al
    in al,0x60
    mov bl,al
    and bl,0xFE
    or bl,0x02
    mov al,0x60
    out 0x64,al
    mov al,bl
    out 0x60,al

    mov al,0xA8
    out 0x64,al
    mov al,0x20
    out 0x64,al
    in al,0x60



    mov al,0xD4 ; reset
    out 0x64,al
    in al,0x64
    mov al,0xFF
    out 0x60,al
    in al,0x60
    in al,0x60
    in al,0x60
    
    mov al,0xD4 ; disable scanning
    out 0x64,al
    mov al,0xF5
    out 0x60,al
    in al,0x60

    mov al,0xD4 ; device ID
    out 0x64,al
    mov al,0xF2
    out 0x60,al
    in al,0x60
    in al,0x60

    mov al,0xD4 ; set defaults
    out 0x64,al
    mov al,0xF6
    out 0x60,al
    in al,0x60
    in al,0x60
    in al,0x60

    mov al,0xD4 ; enable scanning 
    out 0x64,al
    mov al,0xF4
    out 0x60,al
    in al,0x60

    mov al,0x20
    out 0x64,al
    in al,0x60
    sti




end:
    in al,0x64
    jmp end


kb_irq_handler:
    cli
    add word [mycnt],1
    mov ax, [mycnt]
chk_buff:
    in al,0x64
    and al,0x01
    cmp al,0x01
    je read_buff
    jmp read_end
read_buff:
    mov ax,0
    in al,0x60
    mov cx,0xb800
    mov es,cx
    add word [counter],1
    mov bx,[counter]
    cmp bx,1
    je prnt1
    cmp bx,2
    je prnt2
    cmp bx,3
    je prnt3
    jmp prnt_end
prnt1:
    mov di,0
    mov dword [es:di],0x4e004e00
    add di,4
    mov dword [es:di],0x4e004e00
    mov word [video_memory_index],0
    call printInt
    jmp prnt_end
prnt2:
    mov di,160
    mov dword [es:di],0x1e001e00
    add di,4
    mov dword [es:di],0x1e001e00
    mov word [video_memory_index],160
    call printInt
    jmp prnt_end
prnt3:
    mov di,320
    mov dword [es:di],0x2e002e00
    add di,4
    mov dword [es:di],0x2e002e00
    mov word [video_memory_index],320
    call printInt
    mov word [counter],0
prnt_end:
    jmp chk_buff
read_end:
    ;mov ax,0xb800
    ;mov es,ax
    ;mov di,[screen_kb]
    ;mov ax, 0x4e45
    ;mov [es:di],ax
    ;add word [screen_kb],2
    mov al,0x20
    out 0x20,al
    out 0xA0,al
    sti
    iret

;prints ax to screen
printInt:
    pusha;
    push di
    push es
    mov cx,0x0000;
divide:    
    mov dx,0x0000;
    mov bx,0x000A;
    div bx;
    inc cx;
    add dx,48;
    mov dh,0x4e;
    push dx;
    cmp ax,0x0000;
    jne divide;
print:    
    pop dx;
    mov di,[video_memory_index];
    mov es,[video_memory_base];
    mov [es:di], dx;
    inc di;
    inc di;
    mov [video_memory_index],di;
    dec cx;
    cmp cx,0x0000;
    jne print;
    pop es
    pop di
    popa
    ret;

kb_irq_offset dw 0x00B0
screen_kb dw 0x0000
video_memory_base dw 0xb800;
video_memory_index dw 0x0000;
counter dw 0x0000
mycnt dw 0x0000
times 510-($-$$) db 0
db 0x55
db 0xAA
